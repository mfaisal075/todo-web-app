{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=getStateFromPath;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _escapeStringRegexp=_interopRequireDefault(require(\"escape-string-regexp\"));var queryString=_interopRequireWildcard(require(\"query-string\"));var _findFocusedRoute=_interopRequireDefault(require(\"./findFocusedRoute\"));var _validatePathConfig=_interopRequireDefault(require(\"./validatePathConfig\"));function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function getStateFromPath(path,options){var _ref;if(options){(0,_validatePathConfig.default)(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:`${remaining}/`;if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,(0,_toConsumableArray2.default)(Object.keys(screens).map(function(key){return _createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);}}return Object.assign(acc,(0,_defineProperty2.default)({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return Object.assign({},c,{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,(0,_toConsumableArray2.default)(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(config){if(!config.regex){return 0;}var match=remainingPath.match(config.regex);if(match){var matchResult=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').reduce(function(acc,p,index){if(!p.startsWith(':')){return acc;}acc.pos+=1;var decodedParamSegment=decodeURIComponent(match[(acc.pos+1)*2].replace(/\\/$/,''));Object.assign(acc.matchedParams,(0,_defineProperty2.default)({},p,Object.assign(acc.matchedParams[p]||{},(0,_defineProperty2.default)({},index,decodedParamSegment))));return acc;},{pos:-1,matchedParams:{}});var matchedParams=matchResult.matchedParams||{};routes=config.routeNames.map(function(name){var _routeConfig$pattern$;var routeConfig=configs.find(function(c){return c.screen===name&&config.pattern.startsWith(c.pattern);});var normalizedPath=routeConfig===null||routeConfig===void 0?void 0:routeConfig.path.split('/').filter(Boolean).join('/');var numInitialSegments=routeConfig===null||routeConfig===void 0?void 0:(_routeConfig$pattern$=routeConfig.pattern.replace(new RegExp(`${(0,_escapeStringRegexp.default)(normalizedPath)}$`),''))===null||_routeConfig$pattern$===void 0?void 0:_routeConfig$pattern$.split('/').length;var params=normalizedPath===null||normalizedPath===void 0?void 0:normalizedPath.split('/').reduce(function(acc,p,index){var _matchedParams$p;if(!p.startsWith(':')){return acc;}var offset=numInitialSegments?numInitialSegments-1:0;var value=(_matchedParams$p=matchedParams[p])===null||_matchedParams$p===void 0?void 0:_matchedParams$p[index+offset];if(value){var _routeConfig$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=routeConfig!==null&&routeConfig!==void 0&&(_routeConfig$parse=routeConfig.parse)!==null&&_routeConfig$parse!==void 0&&_routeConfig$parse[key]?routeConfig.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return 1;}},_config$pattern,_ret;for(var config of configs){_ret=_loop(config);if(_ret===0)continue;if(_ret===1)break;}return{routes:routes,remainingPath:remainingPath};};var _createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern2;var result=_createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,(0,_toConsumableArray2.default)(parentScreens),(_pattern2=_pattern)!=null?_pattern2:parentPattern);configs.push.apply(configs,(0,_toConsumableArray2.default)(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(`^(${pattern.split('/').map(function(it){if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}return`${it==='*'?'.*':(0,_escapeStringRegexp.default)(it)}\\\\/`;}).join('')})`):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:(0,_toConsumableArray2.default)(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var config of initialRoutes){if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},Object.assign({},route,{state:{routes:[]}})]};}else{return{routes:[Object.assign({},route,{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=(0,_findFocusedRoute.default)(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=Object.assign({},route.params,params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getStateFromPath","path","options","_ref","validatePathConfig","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","apply","_toConsumableArray2","keys","key","createNormalizedConfigs","sort","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","_defineProperty2","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","matchResult","_config$pattern","index","pos","decodedParamSegment","matchedParams","_routeConfig$pattern$","routeConfig","normalizedPath","numInitialSegments","escape","params","_matchedParams$p","offset","value","_routeConfig$parse","parse","_ret","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query"],"sources":["C:\\Users\\Mian\\Desktop\\app\\TodoWebApp\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}