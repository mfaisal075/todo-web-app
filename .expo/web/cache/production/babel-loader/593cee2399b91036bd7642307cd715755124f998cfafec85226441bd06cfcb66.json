{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CodedError=void 0;var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _wrapNativeSuper2=_interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));function _callSuper(t,o,e){return o=(0,_getPrototypeOf2.default)(o),(0,_possibleConstructorReturn2.default)(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],(0,_getPrototypeOf2.default)(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}var CodedError=exports.CodedError=function(_Error){function CodedError(code,message){var _this;(0,_classCallCheck2.default)(this,CodedError);_this=_callSuper(this,CodedError,[message]);_this.code=code;return _this;}(0,_inherits2.default)(CodedError,_Error);return(0,_createClass2.default)(CodedError);}((0,_wrapNativeSuper2.default)(Error));","map":{"version":3,"names":["CodedError","exports","_Error","code","message","_this","_classCallCheck2","default","_callSuper","_inherits2","_createClass2","_wrapNativeSuper2","Error"],"sources":["C:\\Users\\Mian\\Desktop\\app\\TodoWebApp\\node_modules\\expo-modules-core\\src\\errors\\CodedError.ts"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"mappings":"+pCAKa,CAAAA,UAAW,CAAAC,OAAA,CAAAD,UAAA,UAAAE,MAAA,EAItB,SAAAF,WAAYG,IAAY,CAAEC,OAAe,MAAAC,KAAA,IAAAC,gBAAA,CAAAC,OAAA,OAAAP,UAAA,EACvCK,KAAA,CAAAG,UAAA,MAAAR,UAAA,EAAMI,OAAO,GACbC,KAAA,CAAKF,IAAI,CAAGA,IAAI,CAAC,OAAAE,KAAA,CACnB,CAAC,GAAAI,UAAA,CAAAF,OAAA,EAAAP,UAAA,CAAAE,MAAA,WAAAQ,aAAA,CAAAH,OAAA,EAAAP,UAAA,OAAAW,iBAAA,CAAAJ,OAAA,EAP6BK,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}